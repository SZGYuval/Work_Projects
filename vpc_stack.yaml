AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This Template will create the following resources: two vpcs,
  each subnet will contains two public subnets and two private subnets.
  In each vpc, there is going to be an ec2 instance within one of the
  private subnets. The goal is to make the instances communicate with
  each other. The vpcs are going to be connected via transit gateway. 
  There will be security groups to allow the connection between the instances.

Parameters:
  VpcCidrBlocks:
    Type: List<String>
    Description: A list of two CIDR blocks for the VPCs.
    Default: "20.0.0.0/16, 21.0.0.0/16"

  PublicSubnetsCidrBlocks:
    Type: List<String>
    Description: A list of four CIDR blocks for public subnets
    Default: "20.0.1.0/24, 20.0.2.0/24, 21.0.1.0/24, 21.0.2.0/24"

  PrivateSubnetCidrBlocks:
    Type: List<String>
    Description: A list of four CIDR blocks for private subnets
    Default: "20.0.3.0/24, 20.0.4.0/24, 21.0.3.0/24, 21.0.4.0/24"

  AvailabilityZones:
    Type: List<String>
    Description: A list of availability zones relevent in the eu-north region
    Default: "eu-north-1a, eu-north-1b, eu-north-1c"

Resources:
  # create IAM role with permissions to communicate with systems manager and logs to cloudwatch logs
  EC2InstanceRoleStack:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "SystemsManagerAndCloudWatchAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # systems manager permissions
              - Effect: "Allow"
                Action:
                  - "ssm:SendCommand"
                  - "ssm:DescribeInstanceInformation"
                  - "ssm:GetCommandInvocation"
                  - "ssm:ListCommandInvocations"
                  - "ec2messages:*"
                  - "ssmmessages:*"
                Resource: "*"
              # CloudWatch Logs permissions
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      Tags:
        - Key: Name
          Value: EC2RoleCloudWatchAndSystemsManager

  # instance profile for the ec2 instances
  EC2InstanceProfileStack:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRoleStack

  # transit gateway
  StackTransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      AmazonSideAsn: 65000
      Description: Transit Gateway between VPC1 and VPC2
      AutoAcceptSharedAttachments: disable
      DefaultRouteTableAssociation: enable
      VpnEcmpSupport: enable
      Tags:
        - Key: Name
          Value: StackTransitGateway

  # set the private route table in each vpc to connect with the transit gateway
  # first vpc
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Select [0, !Ref VpcCidrBlocks]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC-1

  # first vpc - first public subnet
  VPC1PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: !Select [0, !Ref PublicSubnetsCidrBlocks]
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: VPC-1-Public-Subnet-1

  # first vpc - second public subnet
  VPC1PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: !Select [ 1, !Ref PublicSubnetsCidrBlocks ]
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      Tags:
        - Key: Name
          Value: VPC-1-Public-Subnet-2

  # first vpc - first private subnet
  VPC1PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: !Select [ 0, !Ref PrivateSubnetCidrBlocks ]
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      Tags:
        - Key: Name
          Value: VPC-1-Private-Subnet-1

  # first vpc - second private subnet
  VPC1PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: !Select [ 1, !Ref PrivateSubnetCidrBlocks ]
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      Tags:
          - Key: Name
            Value: VPC-1-Private-Subnet-2

  # first vpc - public route table
  VPC1PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: VPC-1-Public-RT

  # first vpc - private route table
  VPC1PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: VPC1-Private-RT

  # first vpc - subnets associations
  VPC1PublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC1PublicSubnet1
      RouteTableId: !Ref VPC1PublicRouteTable

  VPC1PublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC1PublicSubnet2
      RouteTableId: !Ref VPC1PublicRouteTable

  VPC1PrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC1PrivateSubnet1
      RouteTableId: !Ref VPC1PrivateRouteTable

  VPC1PrivateSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC1PrivateSubnet2
      RouteTableId: !Ref VPC1PrivateRouteTable

  # first vpc - internet gateway
  VPC1InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPC1-IG

  VPC1InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref VPC1InternetGateway

  # first vpc - route table in the public subnets to internet gateway
  VPC1PublicRouteInternet:
    Type: AWS::EC2::Route
    DependsOn: VPC1InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref VPC1PublicRouteTable
      GatewayId: !Ref VPC1InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  # first vpc - interface endpoints
  # first vpc - security group for interface endpoints
  VPC1InterfaceEndpointsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTPS traffic from the private subnets of the VPC"
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Select [0, !Ref PrivateSubnetCidrBlocks]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Select [1, !Ref PrivateSubnetCidrBlocks]
      Tags:
        - Key: Name
          Value: VPC1-Interface-Endpoints-SG

  # SSM interface endpoint
  VPC1SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC1
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref VPC1PrivateSubnet1
        - !Ref VPC1PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPC1InterfaceEndpointsSecurityGroup
      PrivateDnsEnabled: true
      Tags:
        - Key: Name
          Value: VPC1-SSM-Interface-Endpoint

  # SSM Messages interface endpoint
  VPC1SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC1
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref VPC1PrivateSubnet1
        - !Ref VPC1PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPC1InterfaceEndpointsSecurityGroup
      PrivateDnsEnabled: true
      Tags:
        - Key: Name
          Value: VPC1-SSMMessages-Interface-Endpoint

  # EC2 Messages interface endpoint
  VPC1EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC1
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref VPC1PrivateSubnet1
        - !Ref VPC1PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPC1InterfaceEndpointsSecurityGroup
      PrivateDnsEnabled: true
      Tags:
        - Key: Name
          Value: VPC1-EC2Messages-Interface-Endpoint

  # first vpc - security group for instance to communicate with private instances in the second vpc
  VPC1InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow ICMP form second vpc private cidrs
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Select [2, !Ref PrivateSubnetCidrBlocks]
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Select [3, !Ref PrivateSubnetCidrBlocks]
      Tags:
        - Key: Name
          Value: VPC1-Instance-ICMP-From-VPC2-SG

  # first vpc - ec2 instance
  VPC1EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-02df5cb5ad97983ba
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: 0
          SubnetId: !Ref VPC1PrivateSubnet1
          GroupSet:
            - !Ref VPC1InstanceSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfileStack
      KeyName: !Ref "AWS::NoValue" # removes the key pair association
      Tags:
        - Key: Name
          Value: VPC1PrivateInstance1

  # first vpc - transit gateway attachment
  VPC1TransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref VPC1PrivateSubnet1
        - !Ref VPC1PrivateSubnet2
      TransitGatewayId: !Ref StackTransitGateway
      VpcId: !Ref VPC1

  # first vpc - private route table route to transit gateway
  VPC1PrivateRouteToTransitGatewayFirstCidr:
    Type: AWS::EC2::Route
    DependsOn: VPC1TransitGatewayAttachment
    Properties:
      RouteTableId: !Ref VPC1PrivateRouteTable
      DestinationCidrBlock: !Select [2, !Ref PrivateSubnetCidrBlocks]
      GatewayId: !Ref StackTransitGateway

  VPC1PrivateRouteTableToTransitGatewaySecondCidr:
    Type: AWS::EC2::Route
    DependsOn: VPC1TransitGatewayAttachment
    Properties:
      RouteTableId: !Ref VPC1PrivateRouteTable
      DestinationCidrBlock: !Select [3, !Ref PrivateSubnetCidrBlocks]
      GatewayId: !Ref StackTransitGateway

  # second vpc
  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Select [1, !Ref VpcCidrBlocks]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC-2

  # second vpc - first public subnet
  VPC2PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: !Select [ 2, !Ref PublicSubnetsCidrBlocks ]
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      Tags:
        - Key: Name
          Value: VPC-2-Public-Subnet-1

  # second vpc - second public subnet
  VPC2PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: !Select [ 3, !Ref PublicSubnetsCidrBlocks ]
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      Tags:
        - Key: Name
          Value: VPC-2-Public-Subnet-2

  # second vpc - first private subnet
  VPC2PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: !Select [ 2, !Ref PrivateSubnetCidrBlocks ]
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      Tags:
        - Key: Name
          Value: VPC-2-Private-Subnet-1

  # second vpc - second private subnet
  VPC2PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: !Select [ 3, !Ref PrivateSubnetCidrBlocks ]
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      Tags:
        - Key: Name
          Value: VPC-2-Private-Subnet-2

  # second vpc - public route table
  VPC2PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: VPC2-Public-RT

  # second vpc - private route table
  VPC2PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: VPC2-Private-RT

  # second vpc - route table associations
  VPC2PublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC2PublicSubnet1
      RouteTableId: !Ref VPC2PublicRouteTable

  VPC2PublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC2PublicSubnet2
      RouteTableId: !Ref VPC2PublicRouteTable

  VPC2PrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC2PrivateSubnet1
      RouteTableId: !Ref VPC2PrivateRouteTable

  VPC2PrivateSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VPC2PrivateSubnet2
      RouteTableId: !Ref VPC2PrivateRouteTable

  # second vpc - internet gateway
  VPC2InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPC2-IG

  VPC2InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC2
      InternetGatewayId: !Ref VPC2InternetGateway

  # second vpc - route table in the public subnets to the internet
  VPC2PublicRouteInternet:
    Type: AWS::EC2::Route
    DependsOn: VPC2InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref VPC2PublicRouteTable
      GatewayId: !Ref VPC2InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  # second vpc - instance security group and rules
  # second vpc - security group for VPC interface endpoints
  VPC2InterfaceEndpointsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allows the interface endpoints to get HTTPS traffic within the private subnets of the VPC
      VpcId: !Ref VPC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Select [2, !Ref PrivateSubnetCidrBlocks]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Select [3, !Ref PrivateSubnetCidrBlocks]
      Tags:
        - Key: Name
          Value: VPC2-Interface-Endpoints-SG

  # second vpc - interface endpoints
  # SSM interface endpoint
  VPC2SSMInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref VPC2
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref VPC2PrivateSubnet1
        - !Ref VPC2PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPC2InterfaceEndpointsSecurityGroup
      Tags:
        - Key: Name
          Value: VPC2-SSM-Interface-Endpoint

  # SSM Messages interface endpoint
  VPC2SSMMessagesInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref VPC2
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref VPC2PrivateSubnet1
        - !Ref VPC2PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPC2InterfaceEndpointsSecurityGroup
      Tags:
        - Key: Name
          Value: VPC2-SSMMessages-Interface-Endpoint

  # EC2 Messages interface endpoint
  VPC2EC2MessagesInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref VPC2
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref VPC2PrivateSubnet1
        - !Ref VPC2PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPC2InterfaceEndpointsSecurityGroup
      Tags:
        - Key: Name
          Value: VPC2-EC2Messages-Interface-Endpoint

  # second vpc - security group to communicate with private instances from the first vpc
  VPC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow ICMP from the first vpc private cidrs.
      VpcId: !Ref VPC2
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Select [0, !Ref PrivateSubnetCidrBlocks]
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Select [1, !Ref PrivateSubnetCidrBlocks]
      Tags:
        - Key: Name
          Value: VPC2-Instance-ICMP-From-VPC1-SG

  # second vpc - ec2 instance
  VPC2EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-02df5cb5ad97983ba
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: 0
          SubnetId: !Ref VPC2PrivateSubnet1
          GroupSet:
            - !Ref VPC2InstanceSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfileStack
      KeyName: !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: VPC2PrivateInstance1

  # second vpc - transit gateway attachment
  VPC2TransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref VPC2PrivateSubnet1
        - !Ref VPC2PrivateSubnet2
      TransitGatewayId: !Ref StackTransitGateway
      VpcId: !Ref VPC2

  # second vpc - private route table routes to transit gateway
  VPC2PrivateRouteTableToTransitGatewayFirstCidr:
    Type: AWS::EC2::Route
    DependsOn: VPC2TransitGatewayAttachment
    Properties:
      RouteTableId: !Ref VPC2PrivateRouteTable
      DestinationCidrBlock: !Select [0, !Ref PrivateSubnetCidrBlocks]
      GatewayId: !Ref StackTransitGateway

  VPC2PrivateRouteTableToTransitGatewaySecondCidr:
    Type: AWS::EC2::Route
    DependsOn: VPC2TransitGatewayAttachment
    Properties:
      RouteTableId: !Ref VPC2PrivateRouteTable
      DestinationCidrBlock: !Select [1, !Ref PrivateSubnetCidrBlocks]
      GatewayId: !Ref StackTransitGateway

Outputs:
  Vpc1Id:
    Description: ID of the first VPC
    Value: !Ref VPC1

  Vpc2Id:
    Description: ID of the second VPC
    Value: !Ref VPC2